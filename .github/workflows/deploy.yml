name: Build, Push and Deploy Track-It

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: piwi3910/trackit-backend
  IMAGE_NAME_FRONTEND: piwi3910/trackit-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
          build-args: |
            VITE_API_URL=https://trackit.azrty.com/api/trpc
            VITE_APP_URL=https://trackit.azrty.com
            VITE_WS_URL=wss://trackit.azrty.com/ws
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_PAT }}

      - name: Save Kubeconfig
        run: doctl kubernetes cluster kubeconfig save k8s-1-32-2-do-0-blr1-1746465969965

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Check if namespace exists
        run: |
          kubectl get namespace trackit || kubectl create namespace trackit

      - name: Create/Update Secrets
        run: |
          # Check if secret exists
          if kubectl get secret trackit-secrets -n trackit > /dev/null 2>&1; then
            echo "Secret already exists, skipping creation"
          else
            echo "Creating secrets..."
            kubectl create secret generic trackit-secrets \
              --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              --from-literal=JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}' \
              --from-literal=SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
              --from-literal=ENCRYPTION_KEY='${{ secrets.ENCRYPTION_KEY }}' \
              --from-literal=POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
              --from-literal=POSTGRES_USER=trackit \
              --from-literal=POSTGRES_DB=trackit \
              --from-literal=GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID || '' }}' \
              --from-literal=GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET || '' }}' \
              --from-literal=SMTP_HOST='${{ secrets.SMTP_HOST || '' }}' \
              --from-literal=SMTP_PORT='${{ secrets.SMTP_PORT || '587' }}' \
              --from-literal=SMTP_USER='${{ secrets.SMTP_USER || '' }}' \
              --from-literal=SMTP_PASS='${{ secrets.SMTP_PASS || '' }}' \
              --from-literal=SMTP_FROM='noreply@trackit.azrty.com' \
              -n trackit
          fi

      - name: Deploy Infrastructure
        run: |
          # Apply ConfigMap
          kubectl apply -f k8s/01-configmap.yaml
          
          # Deploy databases if not exists
          kubectl apply -f k8s/03-postgres.yaml
          kubectl apply -f k8s/04-redis.yaml
          
          # Wait for databases to be ready
          echo "Waiting for databases to be ready..."
          kubectl -n trackit wait --for=condition=ready pod -l component=postgres --timeout=300s || true
          kubectl -n trackit wait --for=condition=ready pod -l component=redis --timeout=300s || true

      - name: Run Database Migrations
        run: |
          # Update migration job to use the new image
          sed -i "s|ghcr.io/piwi3910/trackit-backend:latest|ghcr.io/piwi3910/trackit-backend:${{ github.sha }}|g" k8s/08-migrate-job.yaml
          
          # Delete existing job if exists
          kubectl delete job trackit-migrate -n trackit --ignore-not-found=true
          
          # Run migration job
          kubectl apply -f k8s/08-migrate-job.yaml
          kubectl -n trackit wait --for=condition=complete job/trackit-migrate --timeout=300s

      - name: Deploy Application
        run: |
          # Update backend deployment to use the specific SHA tag
          sed -i "s|ghcr.io/piwi3910/trackit-backend:latest|ghcr.io/piwi3910/trackit-backend:${{ github.sha }}|g" k8s/05-backend.yaml
          
          # Update frontend deployment to use the specific SHA tag
          sed -i "s|ghcr.io/piwi3910/trackit-frontend:latest|ghcr.io/piwi3910/trackit-frontend:${{ github.sha }}|g" k8s/06-frontend.yaml
          
          # Apply deployments
          kubectl apply -f k8s/05-backend.yaml
          kubectl apply -f k8s/06-frontend.yaml
          
          # Apply ingress
          kubectl apply -f k8s/07-ingress.yaml

      - name: Force Rollout Restart
        run: |
          # Force a rollout restart to ensure new images are deployed
          kubectl rollout restart deployment/backend -n trackit
          kubectl rollout restart deployment/frontend -n trackit
          
          # Wait for rollouts to complete
          echo "Waiting for backend rollout..."
          kubectl rollout status deployment/backend -n trackit --timeout=300s
          
          echo "Waiting for frontend rollout..."
          kubectl rollout status deployment/frontend -n trackit --timeout=300s

      - name: Verify Deployment
        run: |
          echo "Deployment Status:"
          kubectl -n trackit get pods
          kubectl -n trackit get ingress
          
          # Check backend health
          echo "Checking backend health..."
          kubectl -n trackit get pods -l component=backend
          
          # Check frontend health
          echo "Checking frontend health..."
          kubectl -n trackit get pods -l component=frontend